filetype: modula

detect:
    filename: "\\.m(3|od)$"

rules:
    - type: "\\b(?i:(ABS|ADDRESS|ADR|ADRSIZE|BITSIZE|BOOLEAN|BYTESIZE|CARDINAL|CEILING|CHAR|DEC|DISPOSE|EXTENDED|FALSE|FIRST|FLOAT|FLOOR|INC|INTEGER|ISTYPE|LAST|LONGINT|LONGREAL|LOOPHOLE|MAX|MIN|MUTEX|NARROW|NEW|NIL|NULL|NUMBER|ORD|REAL|REFANY|ROUND|SHORTCARD))\\b"
    - statement: "\\b(?i:(AND|ANY|ARRAY|AS|BEGIN|BITS|BRANDED|BY|CASE|CONST|DIV|DO|ELSE|ELSIF|END|EVAL|EXCEPT|EXCEPTION|EXIT|EXPORTS|FINALLY|FOR|FROM|GENERIC|IF|IMPORT|IN|INTERFACE|LOCK|LOOP|METHODS|MOD|MODULE|NOT|OBJECT|OF|OR|OVERRIDES|PROCEDURE|RAISE|RAISES|READONLY|RECORD|REF|REPEAT|RETURN|REVEAL|ROOT|SET|THEN|TO|TRY|TYPE|TYPECASE|UNSAFE|UNTIL|UNTRACED|VALUE|VAR|WHILE|WITH))\\b"
    - constant: "\\b(?i:(false|true|nil))\\b"
    - special:
        start: "asm"
        end: "end"
        rules: []
    - constant.number: "\\$[0-9A-Fa-f]+"
    - constant.number: "\\b[+-]?[0-9]+([.]?[0-9]+)?(?i:e[+-]?[0-9]+)?"
    - constant.string:
        start: "#[0-9]{1,}"
        end: "$"
        rules: 
            - constant.specialChar: "\\\\."
    - preproc:
        start: "{\\$"
        end: "}"
        rules: []
    - comment:
        start: "//"
        end: "$"
        rules: []
    - comment:
        start: "\\(\\*"
        end: "\\*\\)"
        rules: []
    - comment:
        start: "({)(?:[^$])"
        end: "}"
        rules: []
